import { collection, query, getDocs } from "firebase/firestore";
import { db } from "../{{#each parents}}../{{/each}}firebase";
import { EntityGet, EntityServerGet, ListServiceOpts } from "../{{#each parents}}../{{/each}}types";
import { {{entityInterface}} } from "./types";
import { transformMetadata, processTimestampFields } from '../{{#each parents}}../{{/each}}utils';

export type {{entityInterface}}ListService<T> = ({{> typedSubcollectionParams}} opts?: ListServiceOpts) => Promise<Array<T>>;

const list: {{entityInterface}}ListService<EntityGet<{{entityInterface}}>> = async ({{> subcollectionParams}} opts = {}) => {
  const collectionRef = collection(db, `{{> subcollectionPath}}/{{entityName}}`);
  const q =
    typeof opts.listQueryFn === "function"
      ? opts.listQueryFn(collectionRef)
      : query(collectionRef);
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((doc) => {
    return processTimestampFields(transformMetadata({
        ...doc.data(),
        id: doc.id,
    } as EntityServerGet<{{entityInterface}}>))
  });
};

export default list;
