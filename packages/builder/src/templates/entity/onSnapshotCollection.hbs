import { collection, onSnapshot, query, Unsubscribe } from "firebase/firestore";
<<<<<<< HEAD
import { db } from "../firebase";
=======
import { db } from "../{{#each parents}}../{{/each}}firebase";
>>>>>>> f7a67a4 (fix: more the generation of sub collection to nested structure in the file system)
import { EntityServerGet, ListServiceOpts } from "../{{#each parents}}../{{/each}}types";
import { {{entityInterface}} } from "./types";
import { transformMetadata } from '../{{#each parents}}../{{/each}}utils';

export type {{entityInterface}}OnSnapshotCollectionService<T> = ({{> typedSubcollectionParams}}opts: ListServiceOpts,callback: (docs: Array<T>) => void) => Unsubscribe;

const onSnapshotCollection: {{entityInterface}}OnSnapshotCollectionService<{{entityInterface}}> = ({{> subcollectionParams}}opts, callback, onError ) => {
  const collectionRef = collection(db, `{{> subcollectionPath}}/{{entityName}}`);
  const q = opts.listQueryFn
    ? opts.listQueryFn(collectionRef)
    : query(collectionRef);
  return onSnapshot(
    q, 
    (querySnap) => {
      callback(
        querySnap.docs.map(
          (doc) =>
            (transformMetadata({
              ...doc.data(),
              id: doc.id,
            } as EntityServerGet<{{entityInterface}}>, doc.metadata))
        )
      );
    },
    onError
  );
};

export default onSnapshotCollection;
