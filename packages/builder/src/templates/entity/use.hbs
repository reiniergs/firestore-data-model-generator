import { useState, useEffect } from 'react';
import { FirestoreError } from "firebase/firestore";
import onSnapshotDoc from "./onSnapshotDoc";
import { {{entityInterface}} } from './types';
import { UseDocHook } from '../types';

const useDoc: UseDocHook<{{entityInterface}}> = (id, opts = {}) => {
  const [data, setData] = useState<{{entityInterface}} | null>(null);
  const [error, setError] = useState<FirestoreError | null>(null);
  const [isLoading, setLoading] = useState(false);
  const { disabled = false } = opts;
  useEffect(() => {
    if (!disabled) {
        setLoading(true);
        const unsub = onSnapshotDoc(
          id,
          (doc) => {
            setData(doc);
            setLoading(false);
          },
          (error) => {
            setLoading(false);
            setError(error);
          },
        );
        return () => unsub();
    }    
  }, [id, disabled]);
  return { data, error, isLoading };
}

export default useDoc;
