import { useState, useEffect } from 'react';
import { FirestoreError } from "firebase/firestore";
import onSnapshotCollection from './onSnapshotCollection';
import { {{entityInterface}} } from './types';
import { EntityGet, HookCollectionOpts, HookReturnCollection } from '../{{#each parents}}../{{/each}}types';

export type {{entityInterface}}UseCollectionHook<T> = ({{> typedSubcollectionParams}}opts?: HookCollectionOpts<T>) => HookReturnCollection<T>;


const useCollection: {{entityInterface}}UseCollectionHook<EntityGet<{{entityInterface}}>> = ({{> subcollectionParams}} opts = {}) => {
  const [data, setData] = useState<Array<EntityGet<{{entityInterface}}>>>([]);
  const [error, setError] = useState<FirestoreError | null>(null);
  const [isLoading, setLoading] = useState(false);
  const { disabled = false, onSnap, track = [] } = opts;
  useEffect(() => {
    if (!disabled) {
        setLoading(true);
        const unsub = onSnapshotCollection({{> subcollectionParams}}opts || {}, (docs) => {
            setData(docs);
            setLoading(false);
            if (typeof onSnap === 'function') {
                onSnap(docs);
            }
          },
          (error) => {
            setLoading(false);
            setError(error);
          }
        );
        return () => {
          setLoading(false);
          unsub();
        }  
    }
  }, [disabled, ...track]);
  return { data, error, isLoading };
};

export default useCollection;
