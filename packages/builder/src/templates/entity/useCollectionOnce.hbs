import { useState, useEffect } from "react";
import { FirestoreError } from "firebase/firestore";
import list from "./list";
import { {{entityInterface}} } from "./types";
import { HookCollectionOpts, HookReturnCollection } from '../{{#each parents}}../{{/each}}types';

export type {{entityInterface}}UseCollectionHook<T> = ({{> typedSubcollectionParams}} opts?: HookCollectionOpts<T>) => HookReturnCollection<T>;

const useCollectionOnce: {{entityInterface}}UseCollectionHook<{{entityInterface}}> = ({{> subcollectionParams}} opts = {}) => {
    const [data, setData] = useState<Array<{{entityInterface}}>>([]);
    const [error, setError] = useState<FirestoreError | null>(null);
    const [isLoading, setLoading] = useState(false);
    const { disabled = false, onSnap, track = [] } = opts;
    useEffect(() => {
        if (!disabled) {
            setLoading(true);
            (async () => {
                try {
                    const docs = await list({{> subcollectionParams}} opts);
                    setData(docs);
                    if (typeof onSnap === "function") {
                        onSnap(docs);
                    }
                } catch (err) {
                    if (err instanceof FirestoreError) {
                        setError(err);
                    } else {
                        setError({
                            code: "unknown",
                            message: "Unknown error",
                            name: "Unknown error",
                        });
                    }
                }
                setLoading(false);
            })();
        }
    }, [disabled, ...track]);
    return { data, error, isLoading };
};

export default useCollectionOnce;
