import { useState, useEffect } from 'react';
import { FirestoreError } from "firebase/firestore";
import get from './get';
import { {{entityInterface}} } from './types';
import { EntityGet, HookOpts, HookReturnDoc } from "../{{#each parents}}../{{/each}}types";

export type {{entityInterface}}UseDocHook<T> = ({{> typedSubcollectionParams}} id: string, opts?: HookOpts) => HookReturnDoc<T>;


const useDocOnce: {{entityInterface}}UseDocHook<EntityGet<{{entityInterface}}>> = ({{> subcollectionParams}} id, opts = {}) => {
    const [data, setData] = useState<EntityGet<{{entityInterface}}> | null>(null);
    const [error, setError] = useState<FirestoreError | null>(null);
    const [isLoading, setLoading] = useState(false);
    const { disabled = false } = opts;
    useEffect(() => {
        if (!disabled) {
            setLoading(true);
            (async () => {
                try {
                    const doc = await get({{> subcollectionParams}} id);
                    setData(doc);
                } catch (err) {
                    if (err instanceof FirestoreError) {
                        setError(err);
                    } else {
                        setError({
                            code: "unknown",
                            message: "Unknown error",
                            name: "Unknown error",
                        });
                    }
                }
                setLoading(false);
            })();
        }
    }, [id, disabled]);
    return { data, error, isLoading };
};

export default useDocOnce;
